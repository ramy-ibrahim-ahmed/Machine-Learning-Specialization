import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import SGDRegressor
from sklearn.preprocessing import StandardScaler

# Training data
X_train = np.array(
    [
        [1.24e03, 3.00e00, 1.00e00, 6.40e01],
        [1.95e03, 3.00e00, 2.00e00, 1.70e01],
        [1.72e03, 3.00e00, 2.00e00, 4.20e01],
        [1.96e03, 3.00e00, 2.00e00, 1.50e01],
        [1.31e03, 2.00e00, 1.00e00, 1.40e01],
        [8.64e02, 2.00e00, 1.00e00, 6.60e01],
        [1.84e03, 3.00e00, 1.00e00, 1.70e01],
        [1.03e03, 3.00e00, 1.00e00, 4.30e01],
        [3.19e03, 4.00e00, 2.00e00, 8.70e01],
        [7.88e02, 2.00e00, 1.00e00, 8.00e01],
        [1.20e03, 2.00e00, 2.00e00, 1.70e01],
        [1.56e03, 2.00e00, 1.00e00, 1.80e01],
        [1.43e03, 3.00e00, 1.00e00, 2.00e01],
        [1.22e03, 2.00e00, 1.00e00, 1.50e01],
        [1.09e03, 2.00e00, 1.00e00, 6.40e01],
        [8.48e02, 1.00e00, 1.00e00, 1.70e01],
        [1.68e03, 3.00e00, 2.00e00, 2.30e01],
        [1.77e03, 3.00e00, 2.00e00, 1.80e01],
        [1.04e03, 3.00e00, 1.00e00, 4.40e01],
        [1.65e03, 2.00e00, 1.00e00, 2.10e01],
        [1.09e03, 2.00e00, 1.00e00, 3.50e01],
        [1.32e03, 3.00e00, 1.00e00, 1.40e01],
        [1.59e03, 0.00e00, 1.00e00, 2.00e01],
        [9.72e02, 2.00e00, 1.00e00, 7.30e01],
        [1.10e03, 3.00e00, 1.00e00, 3.70e01],
        [1.00e03, 2.00e00, 1.00e00, 5.10e01],
        [9.04e02, 3.00e00, 1.00e00, 5.50e01],
        [1.69e03, 3.00e00, 1.00e00, 1.30e01],
        [1.07e03, 2.00e00, 1.00e00, 1.00e02],
        [1.42e03, 3.00e00, 2.00e00, 1.90e01],
        [1.16e03, 3.00e00, 1.00e00, 5.20e01],
        [1.94e03, 3.00e00, 2.00e00, 1.20e01],
        [1.22e03, 2.00e00, 2.00e00, 7.40e01],
        [2.48e03, 4.00e00, 2.00e00, 1.60e01],
        [1.20e03, 2.00e00, 1.00e00, 1.80e01],
        [1.84e03, 3.00e00, 2.00e00, 2.00e01],
        [1.85e03, 3.00e00, 2.00e00, 5.70e01],
        [1.66e03, 3.00e00, 2.00e00, 1.90e01],
        [1.10e03, 2.00e00, 2.00e00, 9.70e01],
        [1.78e03, 3.00e00, 2.00e00, 2.80e01],
        [2.03e03, 4.00e00, 2.00e00, 4.50e01],
        [1.78e03, 4.00e00, 2.00e00, 1.07e02],
        [1.07e03, 2.00e00, 1.00e00, 1.00e02],
        [1.55e03, 3.00e00, 1.00e00, 1.60e01],
        [1.95e03, 3.00e00, 2.00e00, 1.60e01],
        [1.22e03, 2.00e00, 2.00e00, 1.20e01],
        [1.62e03, 3.00e00, 1.00e00, 1.60e01],
        [8.16e02, 2.00e00, 1.00e00, 5.80e01],
        [1.35e03, 3.00e00, 1.00e00, 2.10e01],
        [1.57e03, 3.00e00, 1.00e00, 1.40e01],
        [1.49e03, 3.00e00, 1.00e00, 5.70e01],
        [1.51e03, 2.00e00, 1.00e00, 1.60e01],
        [1.10e03, 3.00e00, 1.00e00, 2.70e01],
        [1.76e03, 3.00e00, 2.00e00, 2.40e01],
        [1.21e03, 2.00e00, 1.00e00, 1.40e01],
        [1.47e03, 3.00e00, 2.00e00, 2.40e01],
        [1.77e03, 3.00e00, 2.00e00, 8.40e01],
        [1.65e03, 3.00e00, 1.00e00, 1.90e01],
        [1.03e03, 3.00e00, 1.00e00, 6.00e01],
        [1.12e03, 2.00e00, 2.00e00, 1.60e01],
        [1.15e03, 3.00e00, 1.00e00, 6.20e01],
        [8.16e02, 2.00e00, 1.00e00, 3.90e01],
        [1.04e03, 3.00e00, 1.00e00, 2.50e01],
        [1.39e03, 3.00e00, 1.00e00, 6.40e01],
        [1.60e03, 3.00e00, 2.00e00, 2.90e01],
        [1.22e03, 3.00e00, 1.00e00, 6.30e01],
        [1.07e03, 2.00e00, 1.00e00, 1.00e02],
        [2.60e03, 4.00e00, 2.00e00, 2.20e01],
        [1.43e03, 3.00e00, 1.00e00, 5.90e01],
        [2.09e03, 3.00e00, 2.00e00, 2.60e01],
        [1.79e03, 4.00e00, 2.00e00, 4.90e01],
        [1.48e03, 3.00e00, 2.00e00, 1.60e01],
        [1.04e03, 3.00e00, 1.00e00, 2.50e01],
        [1.43e03, 3.00e00, 1.00e00, 2.20e01],
        [1.16e03, 3.00e00, 1.00e00, 5.30e01],
        [1.55e03, 3.00e00, 2.00e00, 1.20e01],
        [1.98e03, 3.00e00, 2.00e00, 2.20e01],
        [1.06e03, 3.00e00, 1.00e00, 5.30e01],
        [1.18e03, 2.00e00, 1.00e00, 9.90e01],
        [1.36e03, 2.00e00, 1.00e00, 1.70e01],
        [9.60e02, 3.00e00, 1.00e00, 5.10e01],
        [1.46e03, 3.00e00, 2.00e00, 1.60e01],
        [1.45e03, 3.00e00, 2.00e00, 2.50e01],
        [1.21e03, 2.00e00, 1.00e00, 1.50e01],
        [1.55e03, 3.00e00, 2.00e00, 1.60e01],
        [8.82e02, 3.00e00, 1.00e00, 4.90e01],
        [2.03e03, 4.00e00, 2.00e00, 4.50e01],
        [1.04e03, 3.00e00, 1.00e00, 6.20e01],
        [1.62e03, 3.00e00, 1.00e00, 1.60e01],
        [8.03e02, 2.00e00, 1.00e00, 8.00e01],
        [1.43e03, 3.00e00, 2.00e00, 2.10e01],
        [1.66e03, 3.00e00, 1.00e00, 6.10e01],
        [1.54e03, 3.00e00, 1.00e00, 1.60e01],
        [9.48e02, 3.00e00, 1.00e00, 5.30e01],
        [1.22e03, 2.00e00, 2.00e00, 1.20e01],
        [1.43e03, 2.00e00, 1.00e00, 4.30e01],
        [1.66e03, 3.00e00, 2.00e00, 1.90e01],
        [1.21e03, 3.00e00, 1.00e00, 2.00e01],
        [1.05e03, 2.00e00, 1.00e00, 6.50e01],
    ]
)
y_train = np.array(
    [
        300.0,
        509.8,
        394.0,
        540.0,
        415.0,
        230.0,
        560.0,
        294.0,
        718.2,
        200.0,
        302.0,
        468.0,
        374.2,
        388.0,
        282.0,
        311.8,
        401.0,
        449.8,
        301.0,
        502.0,
        340.0,
        400.28,
        572.0,
        264.0,
        304.0,
        298.0,
        219.8,
        490.7,
        216.96,
        368.2,
        280.0,
        526.87,
        237.0,
        562.43,
        369.8,
        460.0,
        374.0,
        390.0,
        158.0,
        426.0,
        390.0,
        277.77,
        216.96,
        425.8,
        504.0,
        329.0,
        464.0,
        220.0,
        358.0,
        478.0,
        334.0,
        426.98,
        290.0,
        463.0,
        390.8,
        354.0,
        350.0,
        460.0,
        237.0,
        288.3,
        282.0,
        249.0,
        304.0,
        332.0,
        351.8,
        310.0,
        216.96,
        666.34,
        330.0,
        480.0,
        330.3,
        348.0,
        304.0,
        384.0,
        316.0,
        430.4,
        450.0,
        284.0,
        275.0,
        414.0,
        258.0,
        378.0,
        350.0,
        412.0,
        373.0,
        225.0,
        390.0,
        267.4,
        464.0,
        174.0,
        340.0,
        430.0,
        440.0,
        216.0,
        329.0,
        388.0,
        390.0,
        356.0,
        257.8,
    ]
)
X_features = ["size(sqft)", "bedrooms", "floors", "age"]

# Scale/Normalize the training data
scaler = StandardScaler()
X_norm = scaler.fit_transform(X_train)

# Fit the regression model
sgdr = SGDRegressor(max_iter=1000)
sgdr.fit(X_norm, y_train)

# Num of iterations completed
# Number of weight updates
print(f"number of iterations completed: {sgdr.n_iter_}")
print(f"number of weight updates: {sgdr.t_}")

# View parameters
b_norm = sgdr.intercept_
w_norm = sgdr.coef_
print(f"w: {w_norm}, b:{b_norm}")

# Predict
y_pred = sgdr.predict(X_norm)

# See Defference
print(f"Prediction on training set:\n{y_pred[:4].round(1)}")
print(f"Target values \n{y_train[:4]}")

# plot
fig, ax = plt.subplots(1, 4, figsize=(12, 4), sharey=True)
for i in range(len(ax)):
    ax[i].scatter(X_train[:, i], y_train, label="target")
    ax[i].scatter(X_train[:, i], y_pred, color='y', label="predict")
    ax[i].set_xlabel(X_features[i])
ax[0].set_ylabel("Price")
ax[0].legend()
fig.suptitle("target versus prediction using z-score normalized model")
plt.show()